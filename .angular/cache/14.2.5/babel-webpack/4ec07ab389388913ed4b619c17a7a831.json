{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Strings } from '../classes/strings';\nimport { Udelezba } from '../classes/udelezba';\nimport { Udelezenec } from '../classes/udelezenec';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./alert.service\";\nimport * as i3 from \"./formatting.service\";\nexport let RepositoryService = /*#__PURE__*/(() => {\n  class RepositoryService {\n    constructor(http, alertService, formattingService) {\n      this.http = http;\n      this.alertService = alertService;\n      this.formattingService = formattingService;\n      this.url_skeleton = environment.urlSkeleton;\n    } // gets raw data\n\n\n    getData(skupina = this.formattingService.getSettings().skupina, force = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // first return array in memory\n        if (!force && this.data != undefined && this.data.length > 0) {\n          return this.data;\n        }\n\n        const apiKey = environment.apiKey;\n        const settings = this.formattingService.getSettings() || this.formattingService.newSettings();\n\n        if (settings == null || settings.id_preglednice == null) {\n          throw 'Table URL not provided';\n        }\n\n        const HttpParams = {\n          key: apiKey\n        };\n        let new_url = this.url_skeleton + settings.id_preglednice + '/values/' + skupina;\n\n        try {\n          const udelezenci = yield this.http.get(new_url, {\n            params: HttpParams\n          }).toPromise();\n          let temp = udelezenci;\n          return this.dataToObject(temp.values);\n        } catch (napaka) {\n          throw 'Reading from table error';\n        }\n      });\n    } // updates raw data\n\n\n    updateData(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const googleProfile = this.formattingService.getProfile();\n        const settings = this.formattingService.getSettings();\n        const apiKey = environment.apiKey;\n        const httpLastnosti = {\n          headers: new HttpHeaders({\n            Authorization: `Bearer ${googleProfile.access_token}`,\n            'Content-Type': 'application/json'\n          })\n        };\n        let new_url = this.url_skeleton + settings.id_preglednice + '/values/' + settings.skupina + '?valueInputOption=RAW&key=' + apiKey;\n        const body = {\n          majorDimension: 'DIMENSION_UNSPECIFIED',\n          range: settings.skupina,\n          values: data\n        };\n\n        try {\n          const odgovor = yield this.http.put(new_url, body, httpLastnosti).toPromise();\n          return odgovor;\n        } catch (napaka) {\n          this.alertService.openSnackBar(Strings.noInternetConnectionError);\n          RepositoryService.obdelajNapako(napaka);\n          return null;\n        }\n      });\n    }\n\n    updateSingleCell(cell, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const googleProfile = this.formattingService.getProfile();\n        const settings = this.formattingService.getSettings();\n        const apiKey = environment.apiKey;\n        const range = `${settings.skupina}!${cell}`;\n        const httpLastnosti = {\n          headers: new HttpHeaders({\n            Authorization: `Bearer ${googleProfile.access_token}`,\n            'Content-Type': 'application/json'\n          })\n        };\n        let new_url = this.url_skeleton + settings.id_preglednice + '/values/' + range + '?valueInputOption=RAW&key=' + apiKey;\n        const body = {\n          majorDimension: 'DIMENSION_UNSPECIFIED',\n          range: range,\n          values: [[value]]\n        };\n\n        try {\n          const odgovor = yield this.http.put(new_url, body, httpLastnosti).toPromise();\n          return odgovor;\n        } catch (napaka) {\n          this.alertService.openSnackBar(Strings.noInternetConnectionError);\n          throw \"Writing to table error\"; // RepositoryService.obdelajNapako(napaka);\n          // return null;\n        }\n      });\n    } // gets excel groups from excel table provided with idTabele\n\n\n    getSheetInfo(idTabele) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const apiKey = environment.apiKey;\n        const HttpParams = {\n          key: apiKey\n        };\n        let url = this.url_skeleton + idTabele;\n\n        try {\n          const data = yield this.http.get(url, {\n            params: HttpParams\n          }).toPromise();\n          return data;\n        } catch (napaka) {\n          return RepositoryService.obdelajNapako(napaka);\n        }\n      });\n    } // gets vodi\n\n\n    getVodi() {\n      let keyword;\n\n      if (this.header.includes(\"Vod\")) {\n        keyword = \"Vod\";\n      } else if (this.header.includes(\"vod\")) {\n        keyword = \"vod\";\n      } else {\n        return null;\n      }\n\n      let vodi = [];\n      this.data.forEach(element => {\n        vodi.push(element[`${keyword}`]);\n      });\n      return [...new Set(vodi)];\n    } // returns local header\n\n\n    getHeader() {\n      if (this.header != undefined && this.header.length > 0) {\n        return this.header;\n      } else {\n        return null;\n      }\n    } // puts raw data into an array of objects\n\n\n    dataToObject(rawData) {\n      this.header = rawData[0].map(element => {\n        return element.toLowerCase();\n      });\n      rawData.shift();\n      let udelezenci = [];\n      rawData.forEach(element => {\n        let udelezenec = new Udelezenec();\n        udelezenec.udelezbe = []; // we use this to see when to stop counting people\n\n        let id_present = false;\n\n        for (let i = 0; i < this.header.length; i++) {\n          if ((this.header[i] == 'id' || this.header[i] == 'Id') && !isNaN(element[i]) && element[i] != \"\") {\n            id_present = true;\n          }\n\n          if (this.header[i] == 'ime' || this.header[i] == 'Ime') {\n            udelezenec.ime = element[i];\n          } else if (this.header[i] == 'id' || this.header[i] == 'Id') {\n            udelezenec.id = element[i];\n          } else if (this.header[i] == 'Vod' || this.header[i] == 'vod') {\n            udelezenec.vod = element[i];\n          } else if (this.header[i] == 'Gruča' || this.header[i] == 'gruča' || this.header[i] == 'Gruca' || this.header[i] == 'gruca') {\n            udelezenec.gruca = element[i];\n          } else if (this.formattingService.jeDatum(this.header[i])) {\n            let udelezba = new Udelezba();\n            udelezba.datum = this.header[i];\n            udelezba.prisotnost = element[i];\n            udelezenec.udelezbe.push(udelezba);\n          }\n        }\n\n        if (id_present) {\n          // easier angular FE display\n          udelezenec.prisotnost = new Object();\n          udelezenec.udelezbe.forEach(udelezba => {\n            udelezenec.prisotnost[udelezba.datum] = udelezba.prisotnost;\n          });\n          udelezenci.push(udelezenec);\n          id_present = false;\n        }\n      });\n      this.data = udelezenci;\n      return udelezenci;\n    } // prints error in human pretty way i guess\n\n\n    static obdelajNapako(napaka) {\n      console.error('Prišlo je do napake', napaka);\n      return Promise.reject(napaka.message || napaka);\n    }\n\n  }\n\n  RepositoryService.ɵfac = function RepositoryService_Factory(t) {\n    return new (t || RepositoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.FormattingService));\n  };\n\n  RepositoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RepositoryService,\n    factory: RepositoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return RepositoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}