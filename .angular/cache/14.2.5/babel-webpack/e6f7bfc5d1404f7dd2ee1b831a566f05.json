{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alert.service\";\nexport let FormattingService = /*#__PURE__*/(() => {\n  class FormattingService {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n\n    jeDatum(datum) {\n      var possibleDate = moment(datum, 'D. M. YYYY', true);\n\n      if (possibleDate.isValid()) {\n        return true;\n      }\n\n      return false;\n    }\n\n    vrniDatume(header) {\n      let datumi = [];\n      header.forEach(element => {\n        if (this.jeDatum(element)) {\n          datumi.push(moment(element, 'D. M. YYYY', true));\n        }\n      });\n      return datumi;\n    }\n\n    getSettings() {\n      let settings = JSON.parse(localStorage.getItem('settings'));\n\n      if (settings == null) {\n        throw \"Settings not yet saved\";\n      }\n\n      return settings;\n    }\n\n    getProfile() {\n      let googleProfile = JSON.parse(localStorage.getItem('googleProfile'));\n\n      if (googleProfile == null) {\n        throw 'User not signed in';\n      }\n\n      return googleProfile;\n    } // gets today's date as a string\n\n\n    getDate() {\n      let date = new Date();\n      let month = date.getMonth() + 1;\n      return `${date.getDate()}.${month}.`;\n    } // generates new basic settings class\n\n\n    newSettings() {\n      let newSettings = {\n        shranjene_preglednice: [],\n        skupina: null,\n        povezava: null,\n        id_preglednice: null,\n        simboli: {\n          prisoten_symbol: 'x',\n          odsoten_symbol: '/',\n          upraviceno_odsoten_symbol: 'o'\n        },\n        minimal_presence: '50',\n        low_presence: '70'\n      };\n      return newSettings;\n    }\n\n    vrniSimbol(index, settings) {\n      switch (index) {\n        case 0:\n          return settings.simboli.prisoten_symbol;\n\n        case 1:\n          return settings.simboli.upraviceno_odsoten_symbol;\n\n        case 2:\n          return settings.simboli.odsoten_symbol;\n      }\n\n      return null;\n    }\n\n    indexToColumn(index) {\n      let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n      let column = \"\";\n\n      while (true) {\n        if (index < alphabet.length - 1) {\n          column += alphabet[index];\n          break;\n        } else {\n          column += alphabet[Math.floor(index / alphabet.length) - 1];\n          index = index - Math.floor(index / alphabet.length) * alphabet.length - 1;\n        }\n      }\n\n      return column;\n    }\n\n  }\n\n  FormattingService.ɵfac = function FormattingService_Factory(t) {\n    return new (t || FormattingService)(i0.ɵɵinject(i1.AlertService));\n  };\n\n  FormattingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormattingService,\n    factory: FormattingService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormattingService;\n})();","map":null,"metadata":{},"sourceType":"module"}