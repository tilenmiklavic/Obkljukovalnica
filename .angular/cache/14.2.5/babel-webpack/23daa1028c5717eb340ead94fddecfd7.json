{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./repository.service\";\nimport * as i2 from \"./formatting.service\";\nimport * as i3 from \"./alert.service\";\nexport let CheckService = /*#__PURE__*/(() => {\n  class CheckService {\n    constructor(repositoryService, formattingService, alertService) {\n      this.repositoryService = repositoryService;\n      this.formattingService = formattingService;\n      this.alertService = alertService;\n    } // gets data from repository service\n\n\n    getUdelezenci(skupina, force = false) {\n      return this.repositoryService.getData(skupina, force);\n    } // changes current data coresponding to input\n    // converts objects to raw data\n    // updates data via repository service\n\n\n    nastaviPrisotnost(id, present, datum) {\n      let settings = this.formattingService.getSettings();\n      let googleProfile = this.formattingService.getProfile();\n      return new Promise((resolve, reject) => {\n        this.repositoryService.getData(settings.skupina, false).then(data => {\n          let header = this.repositoryService.getHeader();\n          let uporabnik = data.find(x => x.id == id);\n          let udelezba = uporabnik.udelezbe.find(x => x.datum.isSame(datum, 'day'));\n\n          let uporabnikForIndex = element => element.id == id;\n\n          let datumForIndex = element => element == datum;\n\n          let uporabnikIndex = data.findIndex(uporabnikForIndex);\n          let datumIndex = header.findIndex(datumForIndex);\n          let simbol = this.formattingService.vrniSimbol(present, settings);\n          udelezba.prisotnost = simbol;\n\n          if (!googleProfile.access_token || googleProfile.access_token == 'undefined') {\n            this.alertService.openSnackBar('Najprej se moraš prijaviti!');\n            return null;\n          }\n\n          let updated_data = [];\n          data.forEach(element => {\n            let foo = [];\n            header.forEach(naslov => {\n              if (element[naslov] != undefined) {\n                // updejt informativnega polja\n                foo.push(element[naslov]);\n              } else {\n                element.udelezbe.some(udelezba => {\n                  if (udelezba.datum == naslov) {\n                    foo.push(udelezba.prisotnost);\n                  }\n\n                  return udelezba.datum == naslov;\n                });\n              }\n            });\n            updated_data.push(foo);\n          });\n          updated_data.unshift(header);\n          this.repositoryService.updateSingleCell(`${this.formattingService.indexToColumn(datumIndex)}${uporabnikIndex + 2}`, simbol).then(odgovor => {\n            resolve(this.repositoryService.dataToObject(updated_data));\n          }).catch(napaka => {\n            reject('Repository error');\n          });\n        });\n      });\n    }\n\n    pobrisiPrisotnosti(datum) {\n      let settings = this.formattingService.getSettings();\n      let googleProfile = this.formattingService.getProfile(); //let datum = this.formattingService.getDate()\n\n      return new Promise((resolve, reject) => {\n        this.repositoryService.getData(settings.skupina, false).then(data => {\n          data.forEach(uporabnik => {\n            let udelezba = uporabnik.udelezbe.find(x => x.datum == datum);\n            udelezba.prisotnost = \"\";\n          });\n\n          if (!googleProfile.access_token || googleProfile.access_token == 'undefined') {\n            this.alertService.openSnackBar('Najprej se moraš prijaviti!');\n            return null;\n          }\n\n          let updated_data = [];\n          let header = this.repositoryService.getHeader();\n          data.forEach(element => {\n            let foo = [];\n            header.forEach(naslov => {\n              if (element[naslov] != undefined) {\n                // updejt informativnega polja\n                foo.push(element[naslov]);\n              } else {\n                element.udelezbe.some(udelezba => {\n                  if (udelezba.datum == naslov) {\n                    foo.push(udelezba.prisotnost);\n                  }\n\n                  return udelezba.datum == naslov;\n                });\n              }\n            });\n            updated_data.push(foo);\n          });\n          updated_data.unshift(header);\n          this.repositoryService.updateData(updated_data).then(odgovor => {\n            resolve(this.repositoryService.dataToObject(updated_data));\n          }).catch(napaka => {\n            reject(napaka);\n          });\n        });\n      });\n    }\n\n    dodajStolpec() {\n      let datum = moment();\n      let header = this.repositoryService.getHeader();\n      header.push(datum);\n      return new Promise((resolve, reject) => {\n        this.repositoryService.getData().then(data => {\n          data.forEach(uporabnik => {\n            uporabnik.prisotnost[datum.format(\"DD.MM.YYYY\").toString()] = \"\";\n            uporabnik.udelezbe.push({\n              datum: moment(datum, \"DD.MM.YYYY\"),\n              prisotnost: \"\"\n            });\n          });\n          let updated_data = [];\n          data.forEach(element => {\n            let foo = [];\n            header.forEach(naslov => {\n              if (element[naslov] != undefined) {\n                // updejt informativnega polja\n                foo.push(element[naslov]);\n              } else {\n                element.udelezbe.some(udelezba => {\n                  if (udelezba.datum == naslov) {\n                    foo.push(udelezba.prisotnost);\n                  }\n\n                  return udelezba.datum == naslov;\n                });\n              }\n            });\n            updated_data.push(foo);\n          });\n          updated_data.unshift(header);\n          this.repositoryService.updateData(updated_data).then(() => {\n            resolve(this.repositoryService.dataToObject(updated_data));\n          }).catch(napaka => {\n            reject(napaka);\n          });\n        });\n      });\n    }\n\n  }\n\n  CheckService.ɵfac = function CheckService_Factory(t) {\n    return new (t || CheckService)(i0.ɵɵinject(i1.RepositoryService), i0.ɵɵinject(i2.FormattingService), i0.ɵɵinject(i3.AlertService));\n  };\n\n  CheckService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CheckService,\n    factory: CheckService.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckService;\n})();","map":null,"metadata":{},"sourceType":"module"}