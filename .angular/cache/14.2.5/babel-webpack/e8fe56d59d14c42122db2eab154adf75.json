{"ast":null,"code":"\"use strict\";\n\nvar core_1 = require('@angular/core');\n\nvar ɵngcc0 = require('@angular/core');\n\nvar ChartComponent = function () {\n  function ChartComponent(elementRef, ngZone) {\n    this.elementRef = elementRef;\n    this.ngZone = ngZone;\n    this.clickCanvas = new core_1.EventEmitter();\n    this.clickDataset = new core_1.EventEmitter();\n    this.clickElements = new core_1.EventEmitter();\n    this.clickElement = new core_1.EventEmitter();\n  }\n\n  ChartComponent.prototype.ngOnInit = function () {\n    this.create();\n  };\n\n  ChartComponent.prototype.ngOnChanges = function (changes) {\n    var _this = this;\n\n    if (this.chart) {\n      if (changes['type'] || changes['options']) {\n        this.create();\n      } else if (changes['data']) {\n        var currentValue_1 = changes['data'].currentValue;\n        ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(function (property) {\n          _this.chart.data[property] = currentValue_1[property];\n        });\n        this.chart.update();\n      }\n    }\n  };\n\n  ChartComponent.prototype.create = function () {\n    var _this = this;\n\n    this.ngZone.runOutsideAngular(function () {\n      if (_this.canvas) {\n        _this.elementRef.nativeElement.removeChild(_this.canvas);\n      }\n\n      _this.canvas = document.createElement('canvas');\n\n      _this.elementRef.nativeElement.appendChild(_this.canvas);\n\n      _this.chart = new Chart(_this.canvas, {\n        type: _this.type,\n        data: _this.data,\n        options: _this.options\n      });\n\n      _this.canvas.onclick = function (e) {\n        _this.ngZone.run(function () {\n          _this.clickCanvas.next(e);\n\n          if (_this.clickDataset.observers.length) {\n            _this.clickDataset.next(_this.chart.getDatasetAtEvent(e));\n          }\n\n          if (_this.clickElements.observers.length) {\n            _this.clickElements.next(_this.chart.getElementsAtEvent(e));\n          }\n\n          if (_this.clickElement.observers.length) {\n            _this.clickElement.next(_this.chart.getElementAtEvent(e));\n          }\n        });\n      };\n    });\n  };\n\n  ChartComponent.ctorParameters = function () {\n    return [{\n      type: core_1.ElementRef\n    }, {\n      type: core_1.NgZone\n    }];\n  };\n\n  ChartComponent.propDecorators = {\n    'type': [{\n      type: core_1.Input\n    }],\n    'data': [{\n      type: core_1.Input\n    }],\n    'options': [{\n      type: core_1.Input\n    }],\n    'clickCanvas': [{\n      type: core_1.Output\n    }],\n    'clickDataset': [{\n      type: core_1.Output\n    }],\n    'clickElements': [{\n      type: core_1.Output\n    }],\n    'clickElement': [{\n      type: core_1.Output\n    }]\n  };\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"chart\"]],\n    inputs: {\n      type: \"type\",\n      data: \"data\",\n      options: \"options\"\n    },\n    outputs: {\n      clickCanvas: \"clickCanvas\",\n      clickDataset: \"clickDataset\",\n      clickElements: \"clickElements\",\n      clickElement: \"clickElement\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function ChartComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ChartComponent;\n}();\n\nexports.ChartComponent = ChartComponent; //# sourceMappingURL=chart.component.js.map","map":null,"metadata":{},"sourceType":"script"}